apply plugin: 'com.android.library'
apply from: "publish.gradle"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    namespace 'com.globalpayments.library'
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 30
        versionName "2.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String","VERSION_NAME","\"${defaultConfig.versionName}\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    //implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.android.material:material:1.2.0-alpha06'
    // Global payments SDK
    implementation 'com.heartlandpaymentsystems:globalpayments-sdk:14.2.8'
    //implementation files('libs/globalpayments-sdk.jar')

    /** Vital SDK dependencies - Start **/
    //switch out commented code to change between local and hosted vital libs
    /*api project(path: ':vital-sdk:bbpos')
    api project(path: ':vital-sdk:core')
    api project(path: ':vital-sdk:ingenico')
    api project(path: ':vital-sdk:portico')
    api project(path: ':vital-sdk:roamreader')
    api project(path: ':vital-sdk:transaction-manager')
    api project(path: ':vital-sdk:database-portico')
    api project(path: ':vital-sdk:temlibrary')
    api project(path: ':vital-sdk:ruadeviceservice')*/
    api 'com.heartlandpaymentsystems:globalpayments-bbpos:1.0.7'
    api 'com.heartlandpaymentsystems:globalpayments-core:1.0.14'
    api 'com.heartlandpaymentsystems:globalpayments-ingenico:1.0.14'
    api 'com.heartlandpaymentsystems:globalpayments-portico:1.0.16'
    api 'com.heartlandpaymentsystems:globalpayments-roamreader:1.0.4'
    api 'com.heartlandpaymentsystems:globalpayments-ruadeviceservice:1.0.0'
    api 'com.heartlandpaymentsystems:globalpayments-temlibrary:1.0.0'
    api 'com.heartlandpaymentsystems:globalpayments-database-portico:1.0.2'
    api 'com.heartlandpaymentsystems:globalpayments-transaction-manager:1.0.14'

    // Apache Commons
    //implementation 'commons-codec:commons-codec:1.13'

    // Dates & Times
    //implementation 'joda-time:joda-time:2.10'

    // Timber Logging: https://github.com/JakeWharton/timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Google GSON
    api 'com.google.code.gson:gson:2.8.4'
   // implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    /** Vital SDK dependencies - End **/

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:core:1.3.0-rc01'
    androidTestImplementation 'androidx.test:runner:1.3.0-rc01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-rc01'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2-rc01'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompileOnly "org.projectlombok:lombok:1.18.12"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.12"

    implementation "androidx.sqlite:sqlite:2.0.1"

    // Test helpers for Room
    def room_version = '2.2.5'
    testImplementation("androidx.room:room-testing:$room_version") {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    androidTestImplementation "androidx.room:room-testing:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // Android Support Libraries
    implementation 'androidx.appcompat:appcompat:1.0.2'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Android Worker package
    def work_version = "2.4.0"
    implementation "androidx.work:work-runtime:$work_version"
    androidTestImplementation "androidx.work:work-runtime:$work_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
    options.addBooleanOption('-ignore-source-errors', true)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}
